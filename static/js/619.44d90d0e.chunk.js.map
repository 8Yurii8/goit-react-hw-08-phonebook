{"version":3,"file":"static/js/619.44d90d0e.chunk.js","mappings":"kRAoHA,UA3GiB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,SAAf,IAC7BI,GAAQH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,KAAf,IACzBC,GAAWC,EAAAA,EAAAA,MAOXC,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,KAAaE,SAAS,oBAC5BC,MAAOH,EAAAA,KACJG,MAAM,yBACND,SAAS,qBACZE,SAAUJ,EAAAA,KACPK,IAAI,EAAG,0CACPH,SAAS,0BAGRI,EAAY,mCAAG,WAAOC,EAAP,mFAAiBC,EAAjB,EAAiBA,cAAjB,kBAEUlB,GAASmB,EAAAA,EAAAA,IAAWF,IAF9B,OAEXG,EAFW,OAGbD,EAAAA,GAAAA,UAAAA,MAA2BC,KAC7BC,EAAAA,GAAAA,QAAc,WACdd,EAAS,WALM,gDAQjBc,EAAAA,GAAAA,MAAY,SARK,yBAUjBH,GAAc,GAVG,4EAAH,wDAclB,OACE,4BACE,yCACCZ,IAAS,qCAAaA,EAAMgB,YAC7B,SAAC,KAAD,CACEC,cAnCgB,CACpBZ,KAAM,GACNE,MAAO,GACPC,SAAU,IAiCNL,iBAAkBA,EAClBe,SAAUR,EAHZ,UAKE,UAAC,KAAD,YACE,4BACE,SAAC,KAAD,CACES,GAAIC,EAAAA,EACJC,KAAK,OACLC,GAAG,OACHjB,KAAK,OACLkB,MAAM,OACNC,QAAQ,WACRC,GAAI,CACFC,MAAO,IACPC,SAAU,WAGd,SAAC,KAAD,CAActB,KAAK,OAAOuB,UAAU,YAGtC,4BACE,SAAC,KAAD,CACET,GAAIC,EAAAA,EACJC,KAAK,QACLC,GAAG,QACHjB,KAAK,QACLkB,MAAM,QACNC,QAAQ,WACRC,GAAI,CACFC,MAAO,IACPC,SAAU,WAGd,SAAC,KAAD,CAActB,KAAK,QAAQuB,UAAU,YAGvC,4BACE,SAAC,KAAD,CACET,GAAIC,EAAAA,EACJC,KAAK,WACLC,GAAG,WACHjB,KAAK,WACLkB,MAAM,WACNC,QAAQ,WACRC,GAAI,CACFC,MAAO,IACPC,SAAU,WAGd,SAAC,KAAD,CAActB,KAAK,WAAWuB,UAAU,YAG1C,SAAC,IAAD,CACEC,MAAO,CAAEC,UAAW,QACpBT,KAAK,SACLG,QAAQ,YACRO,MAAM,UACNC,SAAUpC,EALZ,SAOGA,EAAY,iBAAmB,oBAM3C,C","sources":["components/User/Register.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { TextField, Button } from '@mui/material';\nimport { createUser } from '../../store/user/auth';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\n\nconst Register = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => state.user.isLoading);\n  const error = useSelector(state => state.user.error);\n  const navigate = useNavigate();\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const validationSchema = Yup.object({\n    name: Yup.string().required('Name is required'),\n    email: Yup.string()\n      .email('Invalid email address')\n      .required('Email is required'),\n    password: Yup.string()\n      .min(6, 'Password must be at least 6 characters')\n      .required('Password is required'),\n  });\n\n  const handleSubmit = async (values, { setSubmitting }) => {\n    try {\n      const resultAction = await dispatch(createUser(values));\n      if (createUser.fulfilled.match(resultAction)) {\n        toast.success('Success');\n        navigate('/login');\n      }\n    } catch (error) {\n      toast.error('Error');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Registration</h2>\n      {error && <div>Error: {error.message}</div>}\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <div>\n            <Field\n              as={TextField}\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              label=\"Name\"\n              variant=\"outlined\"\n              sx={{\n                width: 500,\n                maxWidth: '100%',\n              }}\n            />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </div>\n\n          <div>\n            <Field\n              as={TextField}\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              label=\"Email\"\n              variant=\"outlined\"\n              sx={{\n                width: 500,\n                maxWidth: '100%',\n              }}\n            />\n            <ErrorMessage name=\"email\" component=\"div\" />\n          </div>\n\n          <div>\n            <Field\n              as={TextField}\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              label=\"Password\"\n              variant=\"outlined\"\n              sx={{\n                width: 500,\n                maxWidth: '100%',\n              }}\n            />\n            <ErrorMessage name=\"password\" component=\"div\" />\n          </div>\n\n          <Button\n            style={{ marginTop: '10px' }}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Registering...' : 'Register'}\n          </Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\nexport default Register;\n"],"names":["dispatch","useDispatch","isLoading","useSelector","state","user","error","navigate","useNavigate","validationSchema","Yup","name","required","email","password","min","handleSubmit","values","setSubmitting","createUser","resultAction","toast","message","initialValues","onSubmit","as","TextField","type","id","label","variant","sx","width","maxWidth","component","style","marginTop","color","disabled"],"sourceRoot":""}