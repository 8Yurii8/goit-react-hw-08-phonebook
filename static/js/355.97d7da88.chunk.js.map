{"version":3,"file":"static/js/355.97d7da88.chunk.js","mappings":"iRAiGA,UAxFc,WACZ,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,SAAf,IAC7BI,GAAQH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,KAAf,IACzBC,GAAWC,EAAAA,EAAAA,MAMXC,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KACJC,MAAM,yBACNC,SAAS,qBACZC,SAAUH,EAAAA,KAAaE,SAAS,0BAG5BE,EAAY,mCAAG,WAAOC,EAAP,mFAAiBC,EAAjB,EAAiBA,cAAjB,kBAEUhB,GAASiB,EAAAA,EAAAA,IAAUF,IAF7B,OAEXG,EAFW,OAGbD,EAAAA,GAAAA,UAAAA,MAA0BC,KAC5BC,EAAAA,GAAAA,QAAc,WACdZ,EAAS,cALM,gDAQjBa,QAAQC,IAAR,MARiB,yBAUjBL,GAAc,GAVG,4EAAH,wDAclB,OACE,4BACE,kCACCV,IAAS,qCAAaA,EAAMgB,YAC7B,SAAC,KAAD,CACEC,cA/BgB,CACpBZ,MAAO,GACPE,SAAU,IA8BNJ,iBAAkBA,EAClBe,SAAUV,EAHZ,UAKE,UAAC,KAAD,YACE,4BACE,SAAC,KAAD,CACEW,GAAIC,EAAAA,EACJC,KAAK,QACLC,GAAG,QACHC,KAAK,QACLC,MAAM,QACNC,QAAQ,WACRC,GAAI,CACFC,MAAO,IACPC,SAAU,WAGd,SAAC,KAAD,CAAcL,KAAK,QAAQM,UAAU,YAGvC,4BACE,SAAC,KAAD,CACEV,GAAIC,EAAAA,EACJC,KAAK,WACLC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNC,QAAQ,WACRC,GAAI,CACFC,MAAO,IACPC,SAAU,WAGd,SAAC,KAAD,CAAcL,KAAK,WAAWM,UAAU,YAG1C,SAAC,IAAD,CACEC,MAAO,CAAEC,UAAW,QACpBV,KAAK,SACLI,QAAQ,YACRO,MAAM,UACNC,SAAUrC,EALZ,SAOGA,EAAY,gBAAkB,iBAM1C,C","sources":["components/User/Login.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { TextField, Button } from '@mui/material';\nimport { loginUser } from '../../store/user/auth';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => state.user.isLoading);\n  const error = useSelector(state => state.user.error);\n  const navigate = useNavigate();\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const validationSchema = Yup.object({\n    email: Yup.string()\n      .email('Invalid email address')\n      .required('Email is required'),\n    password: Yup.string().required('Password is required'),\n  });\n\n  const handleSubmit = async (values, { setSubmitting }) => {\n    try {\n      const resultAction = await dispatch(loginUser(values));\n      if (loginUser.fulfilled.match(resultAction)) {\n        toast.success('Success');\n        navigate('/contacts');\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Login</h2>\n      {error && <div>Error: {error.message}</div>}\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <div>\n            <Field\n              as={TextField}\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              label=\"Email\"\n              variant=\"outlined\"\n              sx={{\n                width: 500,\n                maxWidth: '100%',\n              }}\n            />\n            <ErrorMessage name=\"email\" component=\"div\" />\n          </div>\n\n          <div>\n            <Field\n              as={TextField}\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              label=\"Password\"\n              variant=\"outlined\"\n              sx={{\n                width: 500,\n                maxWidth: '100%',\n              }}\n            />\n            <ErrorMessage name=\"password\" component=\"div\" />\n          </div>\n\n          <Button\n            style={{ marginTop: '10px' }}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Logging in...' : 'Login'}\n          </Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default Login;\n"],"names":["dispatch","useDispatch","isLoading","useSelector","state","user","error","navigate","useNavigate","validationSchema","Yup","email","required","password","handleSubmit","values","setSubmitting","loginUser","resultAction","toast","console","log","message","initialValues","onSubmit","as","TextField","type","id","name","label","variant","sx","width","maxWidth","component","style","marginTop","color","disabled"],"sourceRoot":""}